{"ast":null,"code":"import axios from 'axios';\nimport { API_ENDPOINTS } from '../config';\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst authService = {\n  async login(username, password) {\n    try {\n      const response = await axios.post(API_ENDPOINTS.AUTH.LOGIN, {\n        username,\n        password\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return {\n        user,\n        accessToken,\n        refreshToken\n      };\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n  async register(username, email, password, role) {\n    try {\n      const response = await axios.post(`${API_ENDPOINTS.AUTH.REGISTER}`, {\n        username,\n        email,\n        password,\n        role\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n  async refreshToken() {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post(API_ENDPOINTS.AUTH.REFRESH, {\n        refreshToken\n      });\n      const {\n        accessToken,\n        refreshToken: newRefreshToken\n      } = response.data;\n      this.setTokens(accessToken, newRefreshToken);\n      return accessToken;\n    } catch (error) {\n      this.clearTokens();\n      throw this.handleError(error);\n    }\n  },\n  async verifyToken() {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        throw new Error('No token available');\n      }\n      const response = await axios.get(API_ENDPOINTS.AUTH.VERIFY, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.user;\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        try {\n          await this.refreshToken();\n          return this.verifyToken();\n        } catch (refreshError) {\n          this.clearTokens();\n          throw this.handleError(refreshError);\n        }\n      }\n      throw this.handleError(error);\n    }\n  },\n  logout() {\n    this.clearTokens();\n  },\n  setTokens(accessToken, refreshToken) {\n    if (accessToken) {\n      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n    }\n    if (refreshToken) {\n      localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n    }\n  },\n  clearTokens() {\n    localStorage.removeItem(ACCESS_TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  },\n  getAccessToken() {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n  getRefreshToken() {\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\n  },\n  isAuthenticated() {\n    return !!this.getAccessToken();\n  },\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const backendMsg = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'An error occurred';\n      // Map backend error messages to user-friendly messages\n      if (backendMsg.toLowerCase().includes('invalid username or password')) {\n        return new Error('User not found or wrong password.');\n      }\n      if (backendMsg.toLowerCase().includes('user not found')) {\n        return new Error('User not found.');\n      }\n      if (backendMsg.toLowerCase().includes('password')) {\n        return new Error('Wrong password.');\n      }\n      return new Error(backendMsg);\n    } else if (error.request) {\n      // The request was made but no response was received\n      return new Error('No response from server. Please check your connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      return new Error('Request failed. Please try again.');\n    }\n  }\n};\n\n// Add axios interceptor for token refresh\naxios.interceptors.response.use(response => response, async error => {\n  var _error$response2;\n  const originalRequest = error.config;\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newToken = await authService.refreshToken();\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      return axios(originalRequest);\n    } catch (refreshError) {\n      authService.clearTokens();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Add axios interceptor for adding token to requests\naxios.interceptors.request.use(config => {\n  const token = authService.getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default authService;","map":{"version":3,"names":["axios","API_ENDPOINTS","ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","authService","login","username","password","response","post","AUTH","LOGIN","accessToken","refreshToken","user","data","setTokens","error","handleError","register","email","role","REGISTER","getRefreshToken","Error","REFRESH","newRefreshToken","clearTokens","verifyToken","token","getAccessToken","get","VERIFY","headers","Authorization","_error$response","status","refreshError","logout","localStorage","setItem","removeItem","getItem","isAuthenticated","_error$response$data","_error$response$data2","backendMsg","message","toLowerCase","includes","request","interceptors","use","_error$response2","originalRequest","config","_retry","newToken","window","location","href","Promise","reject"],"sources":["C:/Users/admin/cybersecurity-platform/cybersecurity-platform v1/frontend/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\nimport { API_ENDPOINTS } from '../config';\n\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\n\nconst authService = {\n  async login(username, password) {\n    try {\n      const response = await axios.post(API_ENDPOINTS.AUTH.LOGIN, {\n        username,\n        password\n      });\n      const { accessToken, refreshToken, user } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return { user, accessToken, refreshToken }; \n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n\n  async register(username, email, password, role) {\n    try {\n      const response = await axios.post(`${API_ENDPOINTS.AUTH.REGISTER}`, {\n        username,\n        email,\n        password,\n        role\n      });\n      const { accessToken, refreshToken, user } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n\n  async refreshToken() {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post(API_ENDPOINTS.AUTH.REFRESH, {\n        refreshToken\n      });\n      const { accessToken, refreshToken: newRefreshToken } = response.data;\n      this.setTokens(accessToken, newRefreshToken);\n      return accessToken;\n    } catch (error) {\n      this.clearTokens();\n      throw this.handleError(error);\n    }\n  },\n\n  async verifyToken() {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        throw new Error('No token available');\n      }\n      const response = await axios.get(API_ENDPOINTS.AUTH.VERIFY, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data.user;\n    } catch (error) {\n      if (error.response?.status === 401) {\n        try {\n          await this.refreshToken();\n          return this.verifyToken();\n        } catch (refreshError) {\n          this.clearTokens();\n          throw this.handleError(refreshError);\n        }\n      }\n      throw this.handleError(error);\n    }\n  },\n\n  logout() {\n    this.clearTokens();\n  },\n\n  setTokens(accessToken, refreshToken) {\n    if (accessToken) {\n      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n    }\n    if (refreshToken) {\n      localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n    }\n  },\n\n  clearTokens() {\n    localStorage.removeItem(ACCESS_TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  },\n\n  getAccessToken() {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n\n  getRefreshToken() {\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\n  },\n\n  isAuthenticated() {\n    return !!this.getAccessToken();\n  },\n\n  handleError(error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const backendMsg = error.response.data?.message || error.response.data?.error || 'An error occurred';\n      // Map backend error messages to user-friendly messages\n      if (backendMsg.toLowerCase().includes('invalid username or password')) {\n        return new Error('User not found or wrong password.');\n      }\n      if (backendMsg.toLowerCase().includes('user not found')) {\n        return new Error('User not found.');\n      }\n      if (backendMsg.toLowerCase().includes('password')) {\n        return new Error('Wrong password.');\n      }\n      return new Error(backendMsg);\n    } else if (error.request) {\n      // The request was made but no response was received\n      return new Error('No response from server. Please check your connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      return new Error('Request failed. Please try again.');\n    }\n  }\n};\n\n// Add axios interceptor for token refresh\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const newToken = await authService.refreshToken();\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return axios(originalRequest);\n      } catch (refreshError) {\n        authService.clearTokens();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Add axios interceptor for adding token to requests\naxios.interceptors.request.use(\n  (config) => {\n    const token = authService.getAccessToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}