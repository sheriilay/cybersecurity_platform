{"ast":null,"code":"import axios from 'axios';\nimport API_CONFIG, { API_ENDPOINTS } from '../config';\nconst authService = {\n  async login(username, password) {\n    try {\n      const response = await axios.post(`${API_ENDPOINTS}${API_ENDPOINTS}`, {\n        username,\n        password\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n  async register(username, password, email) {\n    try {\n      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.REGISTER}`, {\n        username,\n        password,\n        email\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem(API_CONFIG.TOKENS.REFRESH);\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.REFRESH}`, {\n        refreshToken\n      });\n      const {\n        accessToken,\n        refreshToken: newRefreshToken\n      } = response.data;\n      this.setTokens(accessToken, newRefreshToken);\n      return accessToken;\n    } catch (error) {\n      this.clearTokens();\n      throw this.handleError(error);\n    }\n  },\n  async verifyToken() {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        throw new Error('No token available');\n      }\n      const response = await axios.get(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.VERIFY}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.user;\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        try {\n          await this.refreshToken();\n          return this.verifyToken();\n        } catch (refreshError) {\n          this.clearTokens();\n          throw this.handleError(refreshError);\n        }\n      }\n      throw this.handleError(error);\n    }\n  },\n  logout() {\n    this.clearTokens();\n  },\n  setTokens(accessToken, refreshToken) {\n    if (accessToken) {\n      localStorage.setItem(API_CONFIG.TOKENS.ACCESS, accessToken);\n    }\n    if (refreshToken) {\n      localStorage.setItem(API_CONFIG.TOKENS.REFRESH, refreshToken);\n    }\n  },\n  clearTokens() {\n    localStorage.removeItem(API_CONFIG.TOKENS.ACCESS);\n    localStorage.removeItem(API_CONFIG.TOKENS.REFRESH);\n  },\n  getAccessToken() {\n    return localStorage.getItem(API_CONFIG.TOKENS.ACCESS);\n  },\n  getRefreshToken() {\n    return localStorage.getItem(API_CONFIG.TOKENS.REFRESH);\n  },\n  isAuthenticated() {\n    return !!this.getAccessToken();\n  },\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || 'An error occurred';\n      return new Error(message);\n    } else if (error.request) {\n      // The request was made but no response was received\n      return new Error('No response from server. Please check your connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      return new Error('Request failed. Please try again.');\n    }\n  }\n};\n\n// Add axios interceptor for token refresh\naxios.interceptors.response.use(response => response, async error => {\n  var _error$response2;\n  const originalRequest = error.config;\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newToken = await authService.refreshToken();\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      return axios(originalRequest);\n    } catch (refreshError) {\n      authService.clearTokens();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Add axios interceptor for adding token to requests\naxios.interceptors.request.use(config => {\n  const token = authService.getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default authService;","map":{"version":3,"names":["axios","API_CONFIG","API_ENDPOINTS","authService","login","username","password","response","post","accessToken","refreshToken","user","data","setTokens","error","handleError","register","email","BASE_URL","ENDPOINTS","AUTH","REGISTER","localStorage","getItem","TOKENS","REFRESH","Error","newRefreshToken","clearTokens","verifyToken","token","getAccessToken","get","VERIFY","headers","Authorization","_error$response","status","refreshError","logout","setItem","ACCESS","removeItem","getRefreshToken","isAuthenticated","_error$response$data","_error$response$data2","message","request","interceptors","use","_error$response2","originalRequest","config","_retry","newToken","window","location","href","Promise","reject"],"sources":["C:/Users/admin/cybersecurity-platform (6)/cybersecurity-platform v1/frontend/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\nimport API_CONFIG, { API_ENDPOINTS } from '../config';\n\nconst authService = {\n  async login(username, password) {\n    try {\n      const response = await axios.post(`${API_ENDPOINTS}${API_ENDPOINTS}`, {\n        username,\n        password\n      });\n\n      const { accessToken, refreshToken, user } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n\n  async register(username, password, email) {\n    try {\n      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.REGISTER}`, {\n        username,\n        password,\n        email\n      });\n\n      const { accessToken, refreshToken, user } = response.data;\n      this.setTokens(accessToken, refreshToken);\n      return user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  },\n\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem(API_CONFIG.TOKENS.REFRESH);\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.REFRESH}`, {\n        refreshToken\n      });\n\n      const { accessToken, refreshToken: newRefreshToken } = response.data;\n      this.setTokens(accessToken, newRefreshToken);\n      return accessToken;\n    } catch (error) {\n      this.clearTokens();\n      throw this.handleError(error);\n    }\n  },\n\n  async verifyToken() {\n    try {\n      const token = this.getAccessToken();\n      if (!token) {\n        throw new Error('No token available');\n      }\n\n      const response = await axios.get(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.VERIFY}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      return response.data.user;\n    } catch (error) {\n      if (error.response?.status === 401) {\n        try {\n          await this.refreshToken();\n          return this.verifyToken();\n        } catch (refreshError) {\n          this.clearTokens();\n          throw this.handleError(refreshError);\n        }\n      }\n      throw this.handleError(error);\n    }\n  },\n\n  logout() {\n    this.clearTokens();\n  },\n\n  setTokens(accessToken, refreshToken) {\n    if (accessToken) {\n      localStorage.setItem(API_CONFIG.TOKENS.ACCESS, accessToken);\n    }\n    if (refreshToken) {\n      localStorage.setItem(API_CONFIG.TOKENS.REFRESH, refreshToken);\n    }\n  },\n\n  clearTokens() {\n    localStorage.removeItem(API_CONFIG.TOKENS.ACCESS);\n    localStorage.removeItem(API_CONFIG.TOKENS.REFRESH);\n  },\n\n  getAccessToken() {\n    return localStorage.getItem(API_CONFIG.TOKENS.ACCESS);\n  },\n\n  getRefreshToken() {\n    return localStorage.getItem(API_CONFIG.TOKENS.REFRESH);\n  },\n\n  isAuthenticated() {\n    return !!this.getAccessToken();\n  },\n\n  handleError(error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const message = error.response.data?.message || error.response.data?.error || 'An error occurred';\n      return new Error(message);\n    } else if (error.request) {\n      // The request was made but no response was received\n      return new Error('No response from server. Please check your connection.');\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      return new Error('Request failed. Please try again.');\n    }\n  }\n};\n\n// Add axios interceptor for token refresh\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const newToken = await authService.refreshToken();\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return axios(originalRequest);\n      } catch (refreshError) {\n        authService.clearTokens();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Add axios interceptor for adding token to requests\naxios.interceptors.request.use(\n  (config) => {\n    const token = authService.getAccessToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}